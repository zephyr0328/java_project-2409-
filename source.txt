BufferedInputStream과 BufferedOutputStream은 Java I/O에서 제공하는 스트림 클래스입니다. 이 두 클래스는 성능을 개선하기 위해 버퍼링 기능을 제공합니다. 각 클래스의 주요 특징과 용도를 아래와 같이 설명할 수 있습니다.

BufferedInputStream
기능: BufferedInputStream은 입력 스트림의 데이터를 읽을 때, 내부 버퍼를 사용하여 읽기 작업을 최적화합니다. 파일이나 네트워크와 같은 외부 소스에서 데이터를 한 번에 읽어 메모리에 저장한 후, 필요한 만큼만 처리함으로써 I/O 작업의 성능을 향상시킵니다.


코드 
FileInputStream fis = new FileInputStream("example.txt");
BufferedInputStream bis = new BufferedInputStream(fis);
int data;
while ((data = bis.read()) != -1) {
    // 데이터 처리
}
bis.close();


장점: I/O 작업의 횟수를 줄여 성능을 개선하고, 데이터가 메모리에 버퍼링되므로 반복적인 작은 읽기 작업을 피할 수 있습니다.

BufferedOutputStream
기능: BufferedOutputStream은 출력 스트림에 데이터를 쓸 때, 내부 버퍼를 사용하여 성능을 향상시킵니다. 여러 번의 작은 쓰기 작업 대신, 버퍼가 가득 차거나 flush() 메서드가 호출될 때 한 번에 큰 블록으로 데이터를 출력합니다.


코드 
FileOutputStream fos = new FileOutputStream("output.txt");
BufferedOutputStream bos = new BufferedOutputStream(fos);
String data = "Hello, World!";
bos.write(data.getBytes());
bos.flush(); // 버퍼를 비우고 데이터를 강제로 출력
bos.close();
장점: 출력 성능을 향상시키고, 여러 번의 쓰기 작업으로 인한 오버헤드를 줄여줍니다.

결론
이 두 클래스는 I/O 성능을 개선하기 위해 설계되었으며, 파일이나 네트워크에서 데이터를 읽고 쓸 때 특히 유용합니다. 일반적으로, 파일 I/O 작업을 수행할 때는 이러한 버퍼링을 사용하는 것이 좋습니다.